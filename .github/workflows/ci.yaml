name: ci

on: [push]

jobs:
  lint:
    name: 'Lint with black, flake8, and isort'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --editable ".[dev]"
    - name: List installed packages
      run: pip list
    - name: Lint with black
      run: black . --check --diff"
    - name: Lint with flake8
      run: flake8 . --statistics --count --show-source" --ignore=E128,W503
    - name: Lint with isort
      run: isort . --check-only --diff

  unit_tests:
    name: 'Run unit tests'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.7, 3.8]
    env:
      OS: ${{ matrix.os }}
      PYTHON: ${{ matrix.python-version }}
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ".[dev]"
    - name: Test sawatabi package installation
      run: python -c 'import sawatabi'
    - name: List installed packages
      run: pip list
    - name: Run unit tests
      run: |
        cp tests/solver/.optigan.yml ~/.optigan.yml
        pytest --verbose --cov=./ --cov-report=xml
    - name: Upload coverage reports to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.8'
      uses: codecov/codecov-action@v1
      with:
        file: ./coverage.xml
        flags: unittests
        env_vars: OS,PYTHON
        name: codecov-umbrella
        fail_ci_if_error: true

  samples:
    name: 'Run samples'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.7, 3.8]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .
    - name: Test sawatabi package installation
      run: python -c 'import sawatabi'
    - name: List installed packages
      run: pip list

    # Model
    - name: Run sample/model/model.py
      run: python sample/model/model.py
    - name: Run sample/model/constraint/n_hot_constraint.py
      run: python sample/model/constraint/n_hot_constraint.py
    - name: Run sample/model/constraint/n_hot_from_scratch.py
      run: python sample/model/constraint/n_hot_from_scratch.py

    # Solver
    - name: Run sample/solver/local_solver.py
      run: python sample/solver/local_solver.py
    - name: Run sample/solver/sawatabi_solver.py
      run: python sample/solver/sawatabi_solver.py

    # Utils
    - name: Run sample/utils/profile.py
      run: python sample/utils/profile.py
    - name: Run sample/utils/utils.py
      run: python sample/utils/utils.py
    - name: Run sample/utils/npp.py
      run: python sample/utils/npp.py

    # Algorithm
    - name: Install dependencies for sample
      run: pip install ".[dev]"
    - name: Run sample/algorithm/npp_incremental.py (local file)
      run: python sample/algorithm/npp_incremental.py --input="tests/algorithm/numbers_100.txt"
    - name: Run sample/algorithm/npp_incremental.py (GCS and output)
      run: python sample/algorithm/npp_incremental.py --input="gs://sawatabi-bucket/numbers_100.txt" --output="tests/algorithm/output_incremental.txt"
    - name: Run sample/algorithm/npp_delta.py (local file)
      run: python sample/algorithm/npp_delta.py --input="tests/algorithm/numbers_100.txt"
    - name: Run sample/algorithm/npp_delta.py (GCS and output)
      run: python sample/algorithm/npp_delta.py --input="gs://sawatabi-bucket/numbers_100.txt" --output="tests/algorithm/output_delta.txt"
    - name: Run sample/algorithm/npp_window.py (local file)
      run: python sample/algorithm/npp_window.py --input="tests/algorithm/numbers_100.txt"
    - name: Run sample/algorithm/npp_window.py (GCS and output)
      run: python sample/algorithm/npp_window.py --input="gs://sawatabi-bucket/numbers_100.txt" --output="tests/algorithm/output_window.txt"
    - name: Run sample/algorithm/tsp_window.py (TSP local file)
      run: python sample/algorithm/tsp_window.py --input="tests/algorithm/cities_47.json"
